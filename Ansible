# login to azure portal 
===================================
https://portal.azure.com/

Allowed Locations->Region-East US, West US, West US 2, West US 3, Central US, East US 2, North Central US , South Central US, West Central US, Central India
VM size->B2_ms, D2as_v4, D2s_v3, D2s_v4, DC1s_v2, DS1_v2, B2s, B1ms, D2alds_v6, D2als_v6, D2as_v6, D2lds_v6, D2ls_v6


# Task:1 Lab setup
==================
# Create VM , select the OS image ubuntu 22.04 version,Standard_B1ms-1 vcpu, 2 GiB memory 
 and install git, ansible and terraform by following steps
# Note: By default git is installed , you can check with command " git --version "
# Go to cloud shell and connect using ssh username@public-ip Once you login on the vm install terraform and ansible 
-------------------------------------------------------------------------------------------------------------------
# Install Terraform
---------------------
- sudo apt update
- sudo apt install wget unzip -y 
- sudo wget https://releases.hashicorp.com/terraform/1.11.4/terraform_1.11.4_linux_amd64.zip
- unzip terraform_1.11.4_linux_amd64.zip 
- ls
- sudo  mv terraform /usr/local/bin/
- terraform -version


# Install Ansible
---------------------

$ sudo apt update
$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible
$ ansible --version
# you can see the following output

ansible [core 2.17.10]
  config file = /etc/ansible/ansible.cfg
  configured module search path = ['/home/ansible/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python3/dist-packages/ansible
  ansible collection location = /home/ansible/.ansible/collections:/usr/share/ansible/collections
  executable location = /usr/bin/ansible
  python version = 3.10.12 (main, Feb  4 2025, 14:57:36) [GCC 11.4.0] (/usr/bin/python3)
  jinja version = 3.0.3
  libyaml = True


==============================================
# install az cli for the azure authentication.
-----------------------------------------------
sudo apt install -y ca-certificates curl apt-transport-https lsb-release gnupg
curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/microsoft.gpg
AZ_REPO=$(lsb_release -cs)
echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
sudo apt update
sudo apt install -y azure-cli
az version
az login

-----------------------------------------------------
Task:2- Setup ansible managenodes using terraform
-----------------------------------------------------
mkdir ~/azure-tf-vms && cd ~/azure-tf-vms

ssh-keygen -t rsa -b 2048 

vi main.tf

# copy the following code, change the subscription id and resourcegroup , location and save in the file

provider "azurerm" {
  features {}
  subscription_id = "607e05a3-6e68-4027-bef6-4184bd3922b9"
}


resource "azurerm_resource_group" "rg" {
  name     = "Martuj-adv-ansibletest"
  location = "East US"
}

# remove hash if you wanted to remove the resource group /*

resource "azurerm_resource_group" "rg" {
  name     = "rg-martuj"
  location = "East US" # Must match the actual location

# comment only tag to delete resourece

  tags = {
    managed_by = "terraform"
    purpose    = "demo"
  }

  lifecycle {
    prevent_destroy = true
    ignore_changes  = [
      name,
      location
    ]
  }
}
       

# To delete resource ignoring rs group run the following command
# terraform state rm azurerm_resource_group.rg
# terraform plan
# terraform apply
# terraform destroy

# remove hash if you wanted to remove the resource group */

resource "azurerm_virtual_network" "vnet" {
  name                = "ansible-vnet"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
}

resource "azurerm_subnet" "subnet" {
  name                 = "ansible-subnet"
  resource_group_name  = azurerm_resource_group.rg.name
  virtual_network_name = azurerm_virtual_network.vnet.name
  address_prefixes     = ["10.0.1.0/24"]
}

resource "azurerm_network_interface" "nic" {
  count               = 2
  name                = "nic-${count.index}"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.subnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.pip[count.index].id
  }
}

resource "azurerm_public_ip" "pip" {
  count               = 2
  name                = "pip-${count.index}"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  allocation_method   = "Static"
}

resource "azurerm_linux_virtual_machine" "vm" {
  count               = 2
  name                = "ansible-node-${count.index}"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  size                = "Standard_B1s"
  admin_username      = "azureuser"
  network_interface_ids = [
    azurerm_network_interface.nic[count.index].id
  ]
  admin_ssh_key {
    username   = "azureuser"
    public_key = file("~/.ssh/id_rsa.pub")
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "0001-com-ubuntu-server-jammy"
    sku       = "22_04-lts-gen2"
    version   = "latest"
  }

provisioner "local-exec" {
    command = "echo ${self.public_ip_address} >> inventory.txt"
  }

  disable_password_authentication = true
}

resource "azurerm_network_security_group" "nsg" {
  name                = "ansible-nsg"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name

  security_rule {
    name                       = "Allow-SSH"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

resource "azurerm_network_interface_security_group_association" "nsg_assoc" {
  count                     = 2
  network_interface_id      = azurerm_network_interface.nic[count.index].id
  network_security_group_id = azurerm_network_security_group.nsg.id
}


#   press escp :wq to save the file


ansible@Adv-Ansible:~/azure-tf-vms$ terraform init

# import existing resource group by the following command 

terraform import azurerm_resource_group.rg /subscriptions/e6b761fc-f852-4952-a285-9edfc03004db/resourceGroups/martuj-aptean

ansible@Adv-Ansible:~/azure-tf-vms$ terraform fmt
ansible@Adv-Ansible:~/azure-tf-vms$ terraform validate
ansible@Adv-Ansible:~/azure-tf-vms$ terraform plan
ansible@Adv-Ansible:~/azure-tf-vms$ terraform apply

-------------------------------------------------------
Task:3 Configure inventory fiel
-------------------------------------------------------
# Open the inventory file and update in the /etc/ansible/hosts file with credentials

# cat inventory.txt 
74.224.99.200
74.224.127.243

# update the ip address in the inventory file
ansible@Adv-Ansible:~/azure-tf-vms$ sudo vi /etc/ansible/hosts 
# This is the default ansible 'hosts' file.
node1 ansible_ssh_host=74.235.227.177 ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa
node2 ansible_ssh_host=172.190.28.59 ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa

# ansible all -m command -a "free -h" 

-----------------------------------------------------------------------------------------
Task:4 run commands on inventory file
-----------------------------------------------------------------------------------------
# update the inventory.ini file
cp inventory.txt inventory.ini
cp inventory.ini inventory.yml

vi inventory.ini

# add the following lines
#74.224.99.200
#74.224.127.243

node1 ansible_ssh_host=74.224.99.200 ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa
node2 ansible_ssh_host=74.224.127.243 ansible_user=azureuser ansible_ssh_private_key_file=~/.ssh/id_rsa

[frontend]
node1
node2

[backend]
node1

[webservers:children]
frontend
backend

[dbservers]
node1
node2

[all:children]
webservers
dbservers

# save the file :wq

# Test the following commands
----------------------------------
# ansible frontend -m command -a "free -h" -i inventory.ini 
# ansible frontend:backend -m command -a "free -h" -i inventory.ini 
# ansible frontend -m command -a "free -h" -i inventory.ini --limit node1
# ansible-inventory -i inventory.ini --list
# ansible-inventory -i inventory.ini --graph
# ansible-inventory -i inventory.ini --host node1
# cp inventory.ini inventory.yml
# ansible-inventory -i inventory.yml --list --yaml

-------------------------------------------------------------
Task-5 mplementing Ansible Variables
-------------------------------------------------------------
Lab:1
ansible@Adv-Ansible:~/ansible/var$ vi implement-vars.yml 
---
- hosts: '{{ hostname }}'
  become: yes
  vars:
    hostname: all
    package1: apache2
    destination: /var/www/html/index.html
    source: /home/ansible/ansible/var/index.html  # update this path as per your control node setup
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install defined package
      apt:
        name: '{{ package1 }}'
        state: latest

    - name: Ensure Apache service is started and enabled
      service:
        name: '{{ package1 }}'
        state: started
        enabled: yes

    - name: Copy required index.html to the document folder for Apache
      copy:
        src: '{{ source }}'
        dest: '{{ destination }}'

save the file

vi index.html

<html>
  <body>
  <h1>Welcome to CloudThat</h1>
  <h1>Welcome to variables</h1>
  </body>
</html>

# save the file

# ansible-playbook implement-vars.yml


# view page use the public ip address of the vm 
# ansible all -m apt -a "name=curl state=present update_cache=yes" -b
# ansible node1 -a "curl localhost "

Lab 2: Implementing ansible variables using extra-vars option
----------------------------------------
# create new file in the same location

vi index1.html
<html>
  <body>
  <h1>This is the alternate Home Page</h1>
  <img src= "https://d3ffutjd2e35ce.cloudfront.net/assets/logo1.png" >
  </body>
</html>

[ec2-user@ansible file]$ pwd
/home/ec2-user/lab5/file
[ec2-user@ansible file]$

# ansible-playbook implement-vars.yml --extra-vars "source=/home/ec2-user/lab5/file/index1.html"

Lab 3: Configuring variables as a separate file and implementing ansible playbook
--------------------------------

vi implement-vars1.yml
---
- hosts: '{{ hostname }}'
  become: yes

  vars_files:
    - myvariables.yml

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install defined package
      apt:
        name: '{{ package1 }}'
        state: latest

    - name: Ensure Apache service is started and enabled
      service:
        name: '{{ package1 }}'
        state: started
        enabled: yes

    - name: Copy index.html to Apache document root
      copy:
        src: '{{ source }}'
        dest: '{{ destination }}'

save the file

vi myvariables.yml
---
hostname: all
package1: httpd
destination: /var/www/html/index.html
source: /home/ansible/ansible/var/index.html


save the file

vi index.html
<html>
  <body>
  <h1>Welcome to CloudThat</h1>
  <h1>Welcome to variables</h1>
  </body>
</html>

# ansible-playbook implement-vars1.yml
==================================================================
Task:6 Implementing Ansible Vault
==================================================================
# Switch to labs directory inside /home/ec2-user
  cd ~/labs 


# Create a sample playbook using below.

  vi implement-vault.yml

vi implement-vars1.yml
---
- name: first play
  hosts: all
  become: yes
  tasks:
    - name: create a directory
      file:
        path: /test
        state: directory
    - name: create a new file
      file:
        path: demo.txt
        mode: 0664
        state: touch

  # Encrypt the playbook using vault using encrypt option
  ansible-vault encrypt implement-vault.yml


  # Verify that the playbook contents are encrypted
  cat implement-vault.yml



  # View the playbook contents (in plaintext) without decrypting by providing the password used for encryption
  ansible-vault view implement-vault.yml


 # To execute the playbook, you need to pass additional option (--ask-vault-pass) as below
  ansible-playbook --ask-vault-pass implement-vault.yml


  # To make any changes to the playbook without decrypting, use edit 
  ansible-vault edit implement-vault.yml
  

  # Execute the playbook with changes
  ansible-playbook --ask-vault-pass implement-vault.yml


  # Use rekey option to change the vault password
  ansible-vault rekey implement-vault.yml
  

  # Verify the playbook contents are encrypted
  cat implement-vault.yml


  # Decrypt the contents using decrypt option
  ansible-vault decrypt implement-vault.yml


  # Verify that playbook contents are visible in plain-text
  cat implement-vault.yml














